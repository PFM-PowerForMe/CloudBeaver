####################################################
# Events API
####################################################

"Events sent by server"
enum CBServerEventId {
    "Configuration changed"
    cb_config_changed,

    "Session log updated"
    cb_session_log_updated,

    "Session websocket connected"
    cb_session_websocket_connected,
    "Session state info updated"
    cb_session_state,
    "Session expired"
    cb_session_expired,

    "Datasource created"
    cb_datasource_created,
    "Datasource updated"
    cb_datasource_updated,
    "Datasource deleted"
    cb_datasource_deleted,

    "Datasource folder created"
    cb_datasource_folder_created,
    "Datasource folder updated"
    cb_datasource_folder_updated,
    "Datasource folder deleted"
    cb_datasource_folder_deleted,

    "Datasource disconnected"
    cb_datasource_disconnected,
    "Datasource connected"
    cb_datasource_connected,

    "Resource manager resource created"
    cb_rm_resource_created,
    "Resource manager resource updated"
    cb_rm_resource_updated,
    "Resource manager resource deleted"
    cb_rm_resource_deleted,

    "Resource manager project added"
    cb_rm_project_added,
    "Resource manager project removed"
    cb_rm_project_removed,

    "Object permissions updated (e.g., datasource)"
    cb_object_permissions_updated,
    "Subject permissions updated (e.g., user, team)"
    cb_subject_permissions_updated,

    "Database output log updated (e.g., DBMS in Oracle)"
    cb_database_output_log_updated,
    cb_ai_chat_message_chunk @since(version: "25.1.1")
    cb_ai_chat_message_error @since(version: "25.1.1")

    "Transaction count updated"
    cb_transaction_count @since(version: "24.3.3"),

    "Session async task info updated"
    cb_session_task_info_updated @since(version: "24.3.1"),
    "Workspace configuration updated"
    cb_workspace_config_changed @since(version: "25.1.1")
}

"Events sent by client"
enum CBClientEventId {
    cb_client_topic_subscribe,
    cb_client_topic_unsubscribe,
    cb_client_projects_active,
    cb_client_session_ping
}

"Client subscribes on topic to receive only related events"
enum CBEventTopic {
    cb_config,
    cb_session_log,
    cb_session,
    cb_datasource,
    cb_datasource_folder,
    cb_scripts,
    cb_projects,
    cb_object_permissions,
    cb_subject_permissions,
    cb_database_output_log,

    cb_session_task, @since(version: "24.3.1")

    cb_datasource_connection,
    cb_delete_temp_folder,

    cb_transaction @since(version: "24.3.3"),
    cb_workspace_configuration @since(version: "25.1.1")
    cb_ai @since(version: "25.1.1")
}

"Base server event interface"
interface CBServerEvent {
    id: CBServerEventId!
    topicId: CBEventTopic
}

"Base client event interface"
interface CBClientEvent {
    id: CBClientEventId!
    topicId: CBEventTopic
}

"Datasource folder event"
type CBDatasourceFolderEvent implements CBServerEvent {
    id: CBServerEventId!
    topicId: CBEventTopic
    nodePaths: [String!]! # list of folders node ids
    projectId: String!
}

"Datasource event"
type CBDatasourceEvent implements CBServerEvent {
    id: CBServerEventId!
    topicId: CBEventTopic
    dataSourceIds: [String!]! # list of datasources ids
    projectId: String!
}

"Resource manager event"
type CBRMEvent implements CBServerEvent {
    id: CBServerEventId!
    topicId: CBEventTopic
    resourcePath: String!
    projectId: String!
}

"Server Config event"
type CBConfigEvent implements CBServerEvent {
    id: CBServerEventId!
    topicId: CBEventTopic
}

"Session log event"
type CBSessionLogEvent implements CBServerEvent {
    id: CBServerEventId!
    topicId: CBEventTopic
}

"WebSocket connected event"
type WSSocketConnectedEvent implements CBServerEvent {
    id: CBServerEventId!
    topicId: CBEventTopic
    applicationRunId: String!
}

"Session state info event"
type WSSessionStateEvent implements CBServerEvent {
    id: CBServerEventId!
    topicId: CBEventTopic
    lastAccessTime: Int!
    remainingTime: Int!
    isValid: Boolean
    isCacheExpired: Boolean
    locale: String!
    actionParameters: Object
}

"Session expired event"
type WSSessionExpiredEvent implements CBServerEvent {
    id: CBServerEventId!
    topicId: CBEventTopic
}

"RM project update event"
type CBProjectUpdateEvent implements CBServerEvent {
    id: CBServerEventId!
    topicId: CBEventTopic
    projectId: String!
}

"Subject permission update event"
type CBSubjectPermissionUpdateEvent implements CBServerEvent {
    id: CBServerEventId!
    topicId: CBEventTopic
}

"Topic subscription event"
type CBTopicEvent implements CBClientEvent {
    id: CBClientEventId!
    "topic to subscribe / unsubscribe"
    topicId: CBEventTopic!
}

"Project event"
type CBProjectEvent implements CBClientEvent {
    id: CBClientEventId!
    topicId: CBEventTopic
    projectId: String!
}

"Active projects event"
type CBProjectsActiveEvent implements CBClientEvent {
    id: CBClientEventId!
    topicId: CBEventTopic
    "list of active projects"
    projectIds: [String!]!
}

"Database output log event"
type CBDatabaseOutputLogEvent implements CBServerEvent {
    id: CBServerEventId!
    topicId: CBEventTopic
    contextId: String!
    messages: [WSOutputLogInfo!]!
    eventTimestamp: Int!
}

"Define the type for WSOutputLogInfo"
type WSOutputLogInfo {
    severity: String
    message: String
    # Add more fields if needed
}

"Async task info status event"
type WSAsyncTaskInfo @since(version: "24.3.1") {
    id: CBServerEventId!
    taskId: ID!
    statusName: String
    running: Boolean!
}

"Datasource disconnect event"
type WSDataSourceDisconnectEvent implements CBServerEvent {
    id: CBServerEventId!
    topicId: CBEventTopic
    connectionId: String!
    projectId: String!
    timestamp: Int!
}
"Datasource connect event"
type WSDataSourceConnectEvent implements CBServerEvent {
    id: CBServerEventId!
    topicId: CBEventTopic
    connectionId: String!
    projectId: String!
    timestamp: Int!
}

"Datasource count event in transactional mode"
type WSTransactionalCountEvent implements CBServerEvent {
    id: CBServerEventId!
    topicId: CBEventTopic
    contextId: String!
    projectId: String!
    connectionId: String!
    transactionalCount: Int!
}

type WSAIChatMessageChunkEvent implements CBServerEvent @since(version: "25.1.1") {
    id: CBServerEventId!
    topicId: CBEventTopic
    conversationId: ID!
    messageId: ID!
    chunk: String
    completed: Boolean!
}

type WSAIChatMessageErrorEvent implements CBServerEvent @since(version: "25.1.1") {
    id: CBServerEventId!
    topicId: CBEventTopic
    conversationId: ID!
    messageId: ID!
    errorMessage: String
}

extend type Query {
    emptyEvent: Boolean
}

extend type Mutation {
    emptyEventMutation: Boolean
}

